allprojects {
    apply plugin: 'java'
    apply from: '../easysocket-build/java_base.gradle'   
    apply from: '../easysocket-build/maven_push.gradle'
        
    dependencies {
		compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.26'
        compile group: 'cn.featherfly.common', name: 'common-core', version: '1.7.15'
        
        testCompile 'org.testng:testng:6.14.3'
        testCompile 'org.slf4j:slf4j-log4j12:1.7.26'
        testCompile 'log4j:log4j:1.2.16'
	}
	ext {
	   nettyVersion = '4.1.46.Final'
	}
}
	
dependencies {
    compile project(":easysocket-api");
    compile group: 'cn.featherfly', name: 'featherfly-common-gentool', version: '0.1.3'
}

ext {
    exceptions = [
            ['yaml':'gentool/exceptions/network-exception.yaml', 'taskName' : 'network'],
            ['yaml':'gentool/exceptions/codec-exception.yaml', 'taskName' : 'codec']
    ]
}

sourceSets {
    main{
        java {
            srcDirs 'src/main/java'
        }
    }
}

// api

def generateExceptionCodeAll = task("all-exception-code", group: 'gen-code-exception') {}
exceptions.each { code ->
    def generateExceptionCode = task("${code.taskName}-exception-code", type: JavaExec, dependsOn: 'classes', group : 'gen-code-exception') {
        classpath = sourceSets.main.runtimeClasspath
        main = "cn.featherfly.common.gentool.exception.GeneratorRunner"
        args = ['gentool/config.yaml', code.yaml]
    }
    generateExceptionCodeAll.dependsOn(generateExceptionCode)
}